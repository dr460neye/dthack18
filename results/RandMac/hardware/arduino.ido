#include <ArduinoJson.h>
#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266HTTPClient.h>
#include <vector>
#include <string>
#include <PubSubClient.h> // Allows us to connect to, and publish to the MQTT broker
#include <NTPClient.h>
#include <WiFiUdp.h>
//All u NEED for the OLED DISPLAY I2C 
#include <Wire.h>    // 
#include <SSD1306Ascii.h>
#include <SSD1306AsciiWire.h> // Original .h  zZ ein 64 Bit Display  - https://github.com/adafruit/Adafruit_SSD1306/issues/57
#include <user_interface.h>
#include <set>

int oledRowCount = 0;
#define I2C_ADDRESS 0x3C    // Define proper RST_PIN if required.
#define RST_PIN -1
SSD1306AsciiWire oled;

const char* apSsid     = "TEST";
const char* apPassword = "TEST";
const char* clientSsid     = "TelekomOS2";
const char* clientPassword = "#dthack18";

const char* mqtt_server = "192.168.178.61";
const char* mqtt_topic = "WiFi/Scan";
const char* mqtt_username = "dthack18";
const char* mqtt_password = "dthack18";
// The client id identifies the ESP8266 device. Think of it a bit like a hostname (Or just a name, like Greg).
const char* clientID = "ESP0001";

WiFiClient wifiClient;
PubSubClient client(mqtt_server, 1883, wifiClient); // 1883 is the listener port for the Broker

long ntplastseen = millis();
int recursion = 0;
long lasttimeupdate = 0;
int bssidssize = -1;

/*

string line1 = " "

*/

HTTPClient http;

WiFiEventHandler probeRequestPrintHandler;

/*********************************
 * Configuration of the NTP Client
 * 3600*2 = 2h synch interval.
 *********************************/
WiFiUDP g_NTPUDP;
NTPClient g_NTPtimeClient(g_NTPUDP, "europe.pool.ntp.org", 3600 * 2, 3600000);


String macToString(const unsigned char* mac) {
  char buf[20];
  snprintf(buf, sizeof(buf), "%02x:%02x:%02x:%02x:%02x:%02x",
           mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
  return String(buf);
}

std::vector<WiFiEventSoftAPModeProbeRequestReceived> myList;
std::set<String> bssids;   

void onProbeRequestPrint(const WiFiEventSoftAPModeProbeRequestReceived& evt) {
  myList.push_back(evt);
}

void setup() {
  Serial.begin(115200);
  Serial.println("Hello!");
  initOLED();
  //pinMode(2, INPUT);

  WiFiConnect();

  g_NTPtimeClient.begin();
  g_NTPtimeClient.update();
}

void initOLED(){
  Wire.begin(D1, D4);     // sda, scl ok: (D1,D2)
  Wire.setClock(400000L);
  oled.begin(&Adafruit128x64, I2C_ADDRESS);
  oled.setFont(Adafruit5x7);
  oled.clear();
  oled.set1X();
  oledRowCount = 0;
  oled.clear();
  }

//int buttonState = 0; 
//int lastbuttonState = 0; 
//const int size
void CheckOledMessage() {
  //Display  ** Display  ** Dosplay ************************
  if (oledRowCount >= 8) {  //bei 128 x 32  sind das 4   or bei 128 x 64  sind das 8
    oledRowCount = 0;
    oled.clear();   //oled.set1X();  //  alles ist auf 1 .. 
    oled.print("Max: ");
    oled.println(bssidssize);
  }
  ++oledRowCount; // jedes CRLF ist eine Zeile und zÃ¤hlt als rowCount 
}


void loop() {
  /*buttonState = digitalRead(2);
  if (buttonState == HIGH) {
    // turn LED on:
  } else {
    // turn LED off:
  }

  if(lastbuttonState != buttonState){
        lastbuttonState = buttonState;
        oled.clear();
        oled.print("Button State:");
        oled.println(buttonState);
  } 

  
  auto setsize = bssids.size();
  */
  long timestamp = g_NTPtimeClient.getEpochTime();
  if (lasttimeupdate + 60000 > millis()) {
    g_NTPtimeClient.update();
  }
  if ( timestamp % 4 == 0) {
    sendData2MQTTServer(timestamp);
    CheckOledMessage();
    myList.clear();
    if (bssidssize < bssids.size()){
      bssidssize  = bssids.size();
    }
    delay(50);
    


    /*oled.print("Sniffed Now: ");
    String s = String(0);
    String ssetsize = String(0);
    oled.print(s);
    oled.print(" Max: ");
    oled.println(ssetsize);
    CheckOledMessage(0);
  */

  }

}


void sendData2MQTTServer(long timestamp) {
  for(WiFiEventSoftAPModeProbeRequestReceived w : myList) {
    String json = "";
    DynamicJsonBuffer jsonBuffer;
    JsonObject& root = jsonBuffer.createObject();
    root["station"] = WiFi.hostname();
    root["address"] = macToString(w.mac);
    bssids.insert(macToString(w.mac));
    //auto size = bssids.size();
    bssidssize  = bssids.size();

    root["rssi"] = w.rssi;
    root["timestamp"] = timestamp;
    if (WiFi.status() != WL_CONNECTED) {
      WiFi.disconnect();
      WiFiConnect();
      
    }

    root.printTo(json);
    sendMQTTMessage(json);
  }
}

void WiFiConnect() {
  WiFi.persistent(false);       // Don't save WiFi configuration in flash - optional

  WiFi.mode(WIFI_AP_STA);       // Access Point and Station Mode
  WiFi.softAP(apSsid, apPassword);
  WiFi.begin(clientSsid, clientPassword);
  while (WiFi.status() != WL_CONNECTED) {
    oled.print(".");
    delay(100);
  }

  oled.println("");
  oled.print("Connected to SSID " + (String)clientSsid + " IP address: "); Serial.println(WiFi.localIP());
  probeRequestPrintHandler = WiFi.onSoftAPModeProbeRequestReceived(&onProbeRequestPrint);
}

boolean connect2mqtt() {
  if (client.connected())
    client.disconnect();
  // Connect to MQTT Broker
  // client.connect returns a boolean value to let us know if the connection was successful.
  // If the connection is failing, make sure you are using the correct MQTT Username and Password (Setup Earlier in the Instructable)
  int i=10;
  while (i > 0) {
    if (client.connect(clientID, mqtt_username, mqtt_password)) {
      //Serial.println("Connected to MQTT Broker!");
      return true;
    }
    i--;
    delay(100);
  }

  oled.println("Connection to MQTT Broker failed...");
  return false;
}

void sendMQTTMessage(String message) {
    connect2mqtt();
    if (client.publish(mqtt_topic, message.c_str())) {
      Serial.println(message);
      recursion = 0;
    } else {
      oled.println("Message failed to send. Reconnecting to MQTT Broker and trying again");
      oled.print("Error state: "); oled.println(client.state());
      delay(200); // This delay ensures that client.publish doesn't clash with the client.connect call
      recursion++;
      if (recursion < 10) {
        connect2mqtt();
        sendMQTTMessage(message);
      } else {
        oled.println("Can't send message after 10 atempts. <");
        oled.println(message);
      }
      //client.publish(mqtt_topic, message.c_str());
    }
    client.disconnect();

    
}
